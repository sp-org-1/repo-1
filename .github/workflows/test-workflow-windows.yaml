# Simple workflow to demonstrate using AWS CodeBuild runner from GitHub Action
name: Test-Workflow-Windows

on:
  workflow_dispatch:
env:
  host: localhost
jobs:
  #job1:
  #  runs-on: windows-latest
  #  steps:
  #    - name: Run1
  #      run: |
  #        Invoke-Command -ScriptBlock {
  #          (Get-Host).Version
  #        }
  build:
    #strategy:
    #  matrix:
    #    host: ['host1', 'host2', 'localhost']
    runs-on: windows-latest 
    steps:
      #- name: Get github context
      #  env:
      #    GITHUB_CONTEXT: ${{ toJSON(github) }}
      #  run: echo "$GITHUB_CONTEXT"
      #  shell: pwsh
      #- name: Get github context
      #  env:
      #    GITHUB_CONTEXT: ${{ toJSON(github) }}
      #  run: curl --help
      #  shell: pwsh
      #- name: Run a one-line script
      #  run: echo Hello, world!
      - name: Run a multi-line script
        run: |
          Write-Output "Add other actions to build,"
          Write-Output "test, and deploy your project."
        shell: pwsh
      #- name: Run1
      #  env:
      #    cmd_part: ${{ matrix.host == 'localhost' && ' ' || format('-ComputerName {0}', matrix.host) }}
      #  run: |
      #    Invoke-Command ${{ env.cmd_part }} -ScriptBlock {
      #      (Get-Host).Version
      #    }
      #  continue-on-error: true
  masking-job-windows:
    runs-on: windows-latest
    steps:
      - name: Mask
        run: |
          $sens_val = "mypassword"
          Write-Host "::add-mask::$sens_val"
          Write-Host "Pwd is $sens_val"
  masking-job-linux:
    runs-on: ubuntu-latest
    steps:
      - id: sets-a-secret
        name: Generate, mask, and output a secret
        run: |
          the_secret=$((RANDOM))
          echo "::add-mask::$the_secret"
          echo "secret-number=$the_secret" >> "$GITHUB_OUTPUT"
      - name: Use that secret output (protected by a mask)
        run: |
          echo "the secret number is ${{ steps.sets-a-secret.outputs.secret-number }}"

